include "Tlbx MoreFilesX.incl"


include resources "1st stage background.gif"
include resources "2nd stage background.gif"
include resources "Apple.gif"
include resources "Cloud quad.gif"
include resources "Cloud single.gif"
include resources "Dirt block.gif"
include resources "Grass block.gif"
include resources "Many spike DOWN.gif"
include resources "Many spike LEFT.gif"
include resources "Many spike RIGHT.gif"
include resources "Save GREEN.gif"
include resources "Save RED.gif"
include resources "Spike DOWN.gif"
include resources "Spike LEFT.gif"
include resources "Spike RIGHT.gif"
include resources "Spike UP.gif"
include resources "Stone block.gif"
include resources "Stone floor block.gif"
include resources "The kid LEFT.gif"
include resources "The kid RIGHT.gif"
include resources "Tree.gif"
include resources "Level 1 Blocks.txt"


local fn ResourceImageToPICTHandle( imageName as CFStringRef, imageRect as ^rect ) as handle
'~'1
dim as GraphicsImportComponent gi 
dim as ComponentResultÊÊÊÊÊÊÊÊ result
dim as PicHandleÊÊÊÊÊÊÊÊÊÊÊÊÊÊ pictH : pictH = NULL
dim as CFURLRefÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊ url
dim as FSRefÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊ fsRef
dim as FSSpecÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊ fsSpec
dim as OSErrÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊ err
dim as BooleanÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊ success

url = fn CFBundleCopyResourceURL( fn CFBundleGetMainBundle(), imageName, 0, 0 )
long if ( url )
success = fn CFURLGetFSRef( url, @fsRef )
CFRelease( url )
long if ( success )
err = fn FSGetCatalogInfo( @fsRef, _kFSCatInfoNone, NULL, NULL, #fsSpec, NULL )
long if ( err == _noErr )
err = fn GetGraphicsImporterForFile( fsSpec, gi )
long if ( err == _noErr )
result = fn GraphicsImportGetAsPicture( gi, pictH )
result = fn GraphicsImportGetBoundsRect( gi, #imageRect )
err = fn CloseComponent( gi )
end if
end if
end if
end if
end fn = (handle)pictHÊÊÊÊ // User must dispose

dim as handle pictH
dim as rectÊÊ r

DIM lastDir AS STR255
DIM hitX1 AS SHORT
DIM hitY1 AS SHORT
DIM hitX2 AS SHORT
DIM hitY2 AS SHORT
DIM distanceCheck AS SHORT
DIM randInt AS SHORT
DIM inkey AS STR255
DIM heightCounter AS SHORT
DIM inkeyFill AS STR255
DIM upDown AS STR255
DIM game AS STR255
DIM score AS SHORT
DIM int3 AS SHORT
DIM scoreCheck AS STR255
DIM leftRight AS STR255
DIM jumpNo AS SHORT
DIM tempJump AS SHORT
DIM index1 AS SHORT
DIM index2 AS SHORT
DIM blocks(19,25) AS STR255
DIM object AS STR255
DIM fPath AS CFURLREF

WINDOW 1, @"IWBTG", (0,0) - (500,500)

LET fpath = OSPANELOPEN(,@"Select a file", @"txt",@"Open",)
OPEN "I",1, @fPath
FOR index2 = 1 TO 19 STEP 1
FOR index1 = 1 TO 25 STEP 1
READ #1, object; 5
FN TRUNCATE (object)
LET blocks(index1,index2) = object
NEXT
NEXT
CLOSE #1

FOR index1 = 1 TO 19 STEP 1
FOR index2 = 1 TO 25 STEP 1
IF blocks(index1,index2) = "brick"
pictH = fn ResourceImageToPICTHandle( @"Dirt block.png", @r )
picture (index1*25,index2*25) - ((index1*25)+25,(index2*25)+25), pictH
fn DisposeH( pictH )
END IF
NEXT
NEXT




/*pictH = fn ResourceImageToPICTHandle( @"1st stage background.png", @r )
picture ( 0,0 ) - ( 500, 500), pictH
fn DisposeH( pictH )*/











LET hitX1 = 60
LET hitX2 = 84

LET hitY1 = 379
LET hitY2 = 400


pictH = fn ResourceImageToPICTHandle( @"The kid RIGHT.gif", @r )
picture ( hitX1,hitY1 ) - ( hitX2, hitY2), pictH
fn DisposeH( pictH )


DO

SELECT upDown
CASE "up"
IF jumpNo = 1
COLOR _zWhite

BOX FILL hitX1,hitY1 TO hitX2,hitY2
hitY1 -= 7
hitY2 -= 7
heightCounter += 1
IF heightCounter = 12
LET heightCounter = 0
LET upDown = "down"
END IF

END IF


IF jumpNo > 1
COLOR _zWhite

BOX FILL hitX1,hitY1 TO hitX2,hitY2
hitY1 -= 7
hitY2 -= 7
heightCounter += 1
IF heightCounter = 8
LET heightCounter = 0
LET upDown = "down"

END IF
END IF

CASE "down"
IF jumpNo = 1
COLOR _zWhite

BOX FILL hitX1,hitY1 TO hitX2,hitY2
hitY1 += 7
hitY2 +=7

IF hitY1 = tempJump
LET upDown = ""
LET inkeyFill = ""
LET jumpNo = 0
END IF

END IF
IF jumpNo >= 2 AND hitY1 < tempJump
COLOR _zWhite

BOX FILL hitX1,hitY1 TO hitX2,hitY2

hitY1 += 7
hitY2 +=7
IF hitY1 = tempJump
LET upDown = ""
LET inkeyFill = ""
LET jumpNo = 0
END IF


END IF

END SELECT

SELECT leftRight
CASE "a"
COLOR _zWhite

BOX FILL hitX1,hitY1 TO hitX2,hitY2
hitX1 -= 20
hitX2 -= 20
LET inkeyFill = ""
LET leftRight = ""

LET lastDir = "a"

CASE "d"
COLOR _zWhite

BOX FILL hitX1,hitY1 TO hitX2,hitY2
hitX1 += 20
hitX2 += 20
LET inkeyFill = ""
LET leftRight = ""

LET lastDir = "d"

END SELECT

SELECT lastDir

CASE "a"

pictH = fn ResourceImageToPICTHandle( @"The kid LEFT.gif", @r )
picture ( hitX1,hitY1 ) - ( hitX2, hitY2), pictH
fn DisposeH( pictH )

CASE "d"

pictH = fn ResourceImageToPICTHandle( @"The kid RIGHT.gif", @r )
picture ( hitX1,hitY1 ) - ( hitX2, hitY2), pictH
fn DisposeH( pictH )

END SELECT



/* _zRed
LONG COLOR 0,0,0,_False

PRINT % (50,50) jumpNo
PRINT % (50,70) heightCounter
PRINT % (50,90) upDown*/ // debug

IF heightCounter = 5 AND jumpNo = 2
PRINT "hI"
END IF



LET inkey = ""

int3 ++
IF int3 = 2
LET int3 = 0
LET inkey = INKEY$

IF inkey <> ""
LET inkeyFill = "yup"
SELECT inkey
CASE " "
LET jumpNo += 1
IF jumpNo = 0 OR jumpNo = 1 OR jumpNo = 2
LET heightCounter = 0
LET upDown = "up"
IF jumpNo = 1
LET tempJump = hitY1
END IF
END IF
CASE "a"
LET leftRight = "a"
CASE "d"
LET leftRight = "d"
END SELECT
LET inkey = ""
END IF

END IF

COLOR _zWhite
BOX FILL 51,51 TO 100, 100


/*
pictH = fn ResourceImageToPICTHandle( @"1st stage background.png", @r )
picture ( 0,0 ) - ( 500, 500), pictH
fn DisposeH( pictH )
*/


UNTIL game = "over"

STOP





